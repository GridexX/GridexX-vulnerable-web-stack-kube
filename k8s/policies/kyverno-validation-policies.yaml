# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: podsecurity-subrule-baseline
#   annotations:
#     policies.kyverno.io/title: Baseline Pod Security Standards
#     policies.kyverno.io/category: Pod Security, EKS Best Practices
#     policies.kyverno.io/severity: high
#     kyverno.io/kyverno-version: 1.8.0
#     policies.kyverno.io/minversion: 1.8.0
#     kyverno.io/kubernetes-version: "1.24"
#     policies.kyverno.io/subject: Pod
#     policies.kyverno.io/description: >-
#       The baseline profile of the Pod Security Standards is a collection of the
#       most basic and important steps that can be taken to secure Pods. Beginning
#       with Kyverno 1.8, an entire profile may be assigned to the cluster through a
#       single rule. This policy configures the baseline profile through the latest
#       version of the Pod Security Standards cluster wide.      
# # Ensure the Pods with the label server has a restricted set of capabilities
# spec:
#   validationFailureAction: Enforce
#   rules:
#   - name: restricted-capabilities for the server
#     match:
#       resources:
#         kinds:
#         - Pod
#         selector:
#           matchLabels:
#             app: server
#     validate:
#       podSecurity:
#         level: restricted
#         version: latest
# ---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: check-label-app
spec:
  validationFailureAction: Enforce
  rules:
    - name: check-label-app
      match:
        any:
        - resources:
            kinds:
            - Pod
      validate:
        message: "The label `app` is required."
        pattern:
          metadata:
            labels:
              app: "?*"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: validate
spec:
  validationFailureAction: Enforce
  rules:
    - name: validate-replica-count
      match:
        any:
        - resources:
            kinds:
            - Deployment
      validate:
        message: "Replica count for a Deployment must be greater than or equal to 1."
        pattern:
          spec:
            replicas: ">=1"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-run-as-non-root-server
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: check-containers
    match:
      any:
      - resources:
          kinds:
          - Pod
          selector:
            matchLabels:
              app: server
    validate:
      message: >-
        Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and
        spec.initContainers[*].securityContext.runAsNonRoot must be `true`.                
      anyPattern:
      # spec.securityContext.runAsNonRoot must be set to true. If containers and/or initContainers exist which declare a securityContext field, those must have runAsNonRoot also set to true.
      - spec:
          securityContext:
            runAsNonRoot: true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-networkpolicy
  annotations:
    policies.kyverno.io/title: Add Network Policy
    policies.kyverno.io/category: Multi-Tenancy, EKS Best Practices
    policies.kyverno.io/subject: NetworkPolicy
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      By default, Kubernetes allows communications across all Pods within a cluster.
      The NetworkPolicy resource and a CNI plug-in that supports NetworkPolicy must be used to restrict
      communications. A default NetworkPolicy should be configured for each Namespace to
      default deny all ingress and egress traffic to the Pods in the Namespace. Application
      teams can then configure additional NetworkPolicy resources to allow desired traffic
      to application Pods from select sources. This policy will create a new NetworkPolicy resource
      named `default-deny` which will deny all traffic anytime a new Namespace is created.      
spec:
  rules:
  - name: default-deny
    match:
      any:
      - resources:
          kinds:
          - Namespace
    generate:
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      name: default-deny
      namespace: "{{request.object.metadata.name}}"
      synchronize: true
      data:
        spec:
          # select all pods in the namespace
          podSelector: {}
          # deny all traffic
          policyTypes:
          - Ingress
          - Egress